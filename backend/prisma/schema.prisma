// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String         @id @default(uuid())
  email                    String         @unique
  nickname                 String         @unique
  pictureURL               String
  status                   String         @default("offline")
  firstTimeLogged          Boolean        @default(true)
  twoFactorAuthSecret      String?
  isTwoFactorAuthEnabled   Boolean        @default(false)
  isTwoFactorAuthValidated Boolean        @default(false)
  requester                RelationShip[] @relation("Requester")
  addressee                RelationShip[] @relation("Addressee")
  winGames                 Game[]         @relation("winGames")
  loseGames                Game[]         @relation("loseGames")
}

model RelationShip {
  id          String @id @default(uuid())
  requesterId String
  addresseeId String
  type        Status // FRIENDSHIP or BLOCK
  requester   User   @relation(name: "Requester", fields: [requesterId], references: [id])
  addressee   User   @relation(name: "Addressee", fields: [addresseeId], references: [id])
}

model Game {
  id         String @id @default(uuid())
  winnerId   String
  loserId    String
  winScore   Int
  loseScore  Int
  winnerUser User   @relation(name: "winGames", fields: [winnerId], references: [id])
  loserUser  User   @relation(name: "loseGames", fields: [loserId], references: [id])
}

model Room {
  id              String     @id @default(uuid())
  name            String     @unique
  owner           String
  admins          String[]
  members         String[]
  blocked         String[]
  type            String // DIRECTMESSAGE | PUBLIC | PROTECTED | PRIVATE
  hashedPassword  String?
  messages        Messages[]
  muted           Muted[]
}

model Messages {
  id           String @id @default(uuid())
  roomName     String
  receiverUser String
  data         String
  room         Room   @relation(fields: [roomName], references: [name], onDelete: Cascade)

  @@map("messages")
}

model Muted {
  id           String @id @default(uuid())
  roomName     String
  receiverUser String
  time         String
  room         Room   @relation(fields: [roomName], references: [name], onDelete: Cascade)

  @@map("muted")
}

enum Status {
  FRIENDSHIP
  BLOCK
}
